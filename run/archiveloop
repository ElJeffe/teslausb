#!/bin/bash -eu

if [ "$BASH_SOURCE" != "$0" ]
then
  echo "$BASH_SOURCE must be executed, not sourced"
  return 1 # shouldn't use exit when sourced
fi

if [ "${FLOCKED:-}" != "$0" ]
then
  if FLOCKED="$0" flock -en -E 99 "$0" "$0" "$@" || case "$?" in
  99) echo already running
      exit 99
      ;;
  *)  exit $?
      ;;
  esac
  then
    # success
    exit 0
  fi
fi

export LOG_FILE=/mutable/archiveloop.log

export CAM_MOUNT=/mnt/cam
export MUSIC_MOUNT=/mnt/music
export ARCHIVE_MOUNT=/mnt/archive
export MUSIC_ARCHIVE_MOUNT=/mnt/musicarchive

function log () {
  echo -n "$( date ): " >> "$LOG_FILE"
  echo "$1" >> "$LOG_FILE"
}

if [ ! -f /root/teslausb.conf ]
then
  log "couldn't find /root/teslausb.conf"
  exit 1
fi

source /root/teslausb.conf

if [ -z "${ARCHIVE_HOST_NAME+x}" ]
then
  log "ARCHIVE_HOST_NAME not set"
  exit 1
fi

function archive_is_reachable () {
  local reachable=true

  /root/bin/archive-is-reachable.sh "$ARCHIVE_HOST_NAME" || reachable=false

  if [ "$reachable" = false ]
  then
    false
    return
  fi
  true
}

function wait_for_archive_to_be_reachable () {
  log "Waiting for archive to be reachable..."
  while [ true ]
  do
    if archive_is_reachable
    then
      log "Archive is reachable."
      break
    fi
    if [ -e /tmp/archive_is_reachable ]
    then
      log "Simulating archive is reachable"
      rm /tmp/archive_is_reachable
      break
    fi
    sleep 1
  done
}

function wait_for_archive_to_be_unreachable () {
  log "Waiting for archive to be unreachable..."
  while [ true ]
    do
      if ! retry archive_is_reachable
      then
        log "Archive is unreachable."
        break
      fi
      if [ -e /tmp/archive_is_unreachable ]
      then
        log "Simulating archive being unreachable."
        rm /tmp/archive_is_unreachable
        break
      fi
      sleep 1
  done
}

function archive_teslacam_clips () {
  log "Starting..."

  ensure_cam_file_is_mounted

  fix_errors_in_cam_file

  /root/bin/archive-clips.sh

  unmount_cam_file
}

function copy_music_files () {
  log "Starting..."

  ensure_music_file_is_mounted

  fix_errors_in_music_file

  /root/bin/copy-music.sh

  unmount_music_file
}

function archive_clips () {
  log "Archiving..."

  disconnect_usb_drives_from_host

  if ! /root/bin/connect-archive.sh
  then
    log "Couldn't connect archive, skipping archive step"
    connect_usb_drives_to_host
    return
  fi

  if archive_teslacam_clips
  then
    log "Finished archiving."
  else
    log "Archiving failed."
  fi

  if [ -d "$MUSIC_ARCHIVE_MOUNT" -a -d "$MUSIC_MOUNT" ]
  then
    log "Copying music..."
    if copy_music_files
    then
      log "Finished copying music."
    else
      log "Copying music failed."
    fi
  else
    log "No music archive configured"
  fi

  /root/bin/disconnect-archive.sh

  connect_usb_drives_to_host
}

function truncate_log () {
  local log_length=$( wc -l "$LOG_FILE" | cut -d' ' -f 1 )
  if [ "$log_length" -gt 10000 ]
  then
    log "Truncating log..."
    local log_file2="${LOG_FILE}.2"
    tail -n 10000 "$LOG_FILE" > "${LOG_FILE}.2"
	mv "$log_file2" "$LOG_FILE"
  fi
}

function slowblink () {
  echo timer > /sys/class/leds/led0/trigger
  echo 900 > /sys/class/leds/led0/delay_on
  echo 100 > /sys/class/leds/led0/delay_off
}

function fastblink () {
  echo timer > /sys/class/leds/led0/trigger
  echo 150 > /sys/class/leds/led0/delay_on
  echo 50 > /sys/class/leds/led0/delay_off
}


function doubleblink () {
  echo heartbeat > /sys/class/leds/led0/trigger
  echo 1 > /sys/class/leds/led0/invert  
}

export -f log

log "Starting..."


# if archive_is_reachable
# then
#   fastblink

#   # archive_clips will fix errors in the cam file
#   mount_and_fix_errors_in_music_file

#   archive_clips

#   doubleblink

#   wait_for_archive_to_be_unreachable
# else
  slowblink

  mount_and_fix_errors_in_files

  connect_usb_drives_to_host
# fi

# while [ true ]
# do
#   slowblink

#   wait_for_archive_to_be_reachable

#   fastblink

#   sleep ${ARCHIVE_DELAY:-20}

#   archive_clips

#   truncate_log

#   doubleblink

#   wait_for_archive_to_be_unreachable
# done
