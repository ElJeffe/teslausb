#!/bin/bash -eu

# this script will mount or unmount the Cam and Music files
# on the USB

if [ "$BASH_SOURCE" != "$0" ]
then
  echo "$BASH_SOURCE must be executed, not sourced"
  return 1 # shouldn't use exit when sourced
fi

if [ "${FLOCKED:-}" != "$0" ]
then
  if FLOCKED="$0" flock -en -E 99 "$0" "$0" "$@" || case "$?" in
  99) echo already running
      exit 99
      ;;
  *)  exit $?
      ;;
  esac
  then
    # success
    exit 0
  fi
fi

if [ $# -lt 1 ]
then
  echo "No argument is provided"
  exit 1
fi

export LOG_FILE=/tmp/usb_mount.log

export CAM_MOUNT=/mnt/cam
export MUSIC_MOUNT=/mnt/music
ERRORS_CHECKED_FILE=/tmp/errors_checked

function log () {
  echo -n "$( date ): " >> "$LOG_FILE"
  echo "$1" >> "$LOG_FILE"
}

function mount_mountpoint () {
  local mount_point="$1"
  log "Mounting $mount_point..."

  local mounted=true
  mount "$mount_point" >> "$LOG_FILE" 2>&1 || mounted=false
  if [ "$mounted" = true ]
  then
    log "Mounted $mount_point."
    true
    return
  else
    log "Failed to mount $mount_point."
    false
    return
  fi
}

function retry () {
  local attempts=0
  while [ true ]
  do
    if eval "$@"
    then
      true
      return
    fi
    if [ "$attempts" -ge 10 ]
    then
      log "Attempts exhausted."
      false
      return
    fi
    log "Sleeping before retry..."
    /bin/sleep 1
    attempts=$((attempts + 1))
    log "Retrying..."
  done
  false
  return
}

function ensure_mountpoint_is_mounted () {
  local mount_point="$1"
  local mount_exists=true

  findmnt --mountpoint "$mount_point" > /dev/null || mount_exists=false

  if [ "$mount_exists" = true ]
  then
    log "$mount_point is already mounted."
  else
    mount_mountpoint "$mount_point"
  fi
}

function ensure_mountpoint_is_mounted_with_retry () {
  retry ensure_mountpoint_is_mounted "$1"
}

function ensure_cam_file_is_mounted () {
  log "Ensuring cam file is mounted..."
  ensure_mountpoint_is_mounted_with_retry "$CAM_MOUNT"
  log "Ensured cam file is mounted."
}

function ensure_music_file_is_mounted () {
  log "Ensuring music backing file is mounted..."
  ensure_mountpoint_is_mounted_with_retry "$MUSIC_MOUNT"
  log "Ensured music drive is mounted."
}

function unmount_mount_point () {
  local mount_point="$1"
  log "Unmounting $mount_point..."
  umount "$mount_point" >> "$LOG_FILE" 2>&1
  log "Unmounted $mount_point."
}

function unmount_cam_file () {
  unmount_mount_point "$CAM_MOUNT"
}

function unmount_music_file () {
  unmount_mount_point "$MUSIC_MOUNT"
}

function fix_errors_in_mount_point () {
  local mount_point="$1"
  log "Running fsck on $mount_point..."
  local backingfile=$(mount | grep -w "$mount_point" | awk '{print $1}') 
  local loopback=$(losetup -l | grep -w  "$backingfile" | awk '{print $1}')
  /sbin/fsck "$loopback" -- -a >> "$LOG_FILE" 2>&1 || echo ""
  log "Finished fsck on $mount_point."
}

function fix_errors_in_cam_file () {
  fix_errors_in_mount_point "$CAM_MOUNT"
}

function fix_errors_in_music_file () {
  fix_errors_in_mount_point "$MUSIC_MOUNT"
}

function mount_and_fix_errors_in_cam_file () {
  ensure_cam_file_is_mounted
  fix_errors_in_cam_file
  unmount_cam_file
}

function mount_and_fix_errors_in_music_file () {
  if [ -e "$MUSIC_MOUNT" ]
  then
    ensure_music_file_is_mounted
    fix_errors_in_music_file
    unmount_music_file
  fi
}

function mount_and_fix_errors_in_files () {
  mount_and_fix_errors_in_cam_file
  mount_and_fix_errors_in_music_file
}

function disconnect_usb_drives_from_host () {
  log "Disconnecting usb from host..."
  modprobe -r g_mass_storage
  log "Disconnected usb from host."
}

function connect_usb_drives_to_host() {
  log "Connecting usb to host..."
  modprobe g_mass_storage
  log "Connected usb to host."
}

if [ $1 == "mount" ]
then
  if ! [ -e "$ERRORS_CHECKED_FILE" ]
  then
    mount_and_fix_errors_in_files
    touch $ERRORS_CHECKED_FILE
  fi
  connect_usb_drives_to_host
elif [ $1 == "unmount" ]
then
  disconnect_usb_drives_from_host
else
  log "Option is not recognized: $1"
fi
